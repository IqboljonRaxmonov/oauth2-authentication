spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/oauth2data
    username: postgres
    password: root123
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
#      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 809294850254-rhvn592qfdg7n53hdu6tbag39mv40en8.apps.googleusercontent.com
            clientSecret: VHSl1gi-crGsFuJDsTIAuS1s
            redirectUri: "http://localhost:8080/oauth2/callback/809294850254"
            scope:
              - email
              - profile
          facebook:
            clientId: 126764166015531
            clientSecret: 7c5597460b387cc88234a6609888b7b1
            redirectUri: "http://localhost:8080/oauth2/callback/126764166015531"
            scope:
              - email
              - public_profile
          github:
            clientId: 839b6ac7de38482dac93
            clientSecret: 0fab4cbc69fcceafc12775634d46371ea1da89de
            redirectUri: "http://localhost:8080/oauth2/callback/839b6ac7de38482dac93"
            scope:
              - email
              - public_profile
#          linkedin:
#            clientId: 77vftqc6n4yget
#            clientSecret: 4xF8t1VfpkEDLMiX
#            redirectUri: "http://localhost:8080/oauth2/callback/77vftqc6n4yget"
##            authorizationGrantType:
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
#          linkedin:
#            userInfoUri: https://api.linkedin.com/v2/me
#            accessTokenUri: https://www.linkedin.com/oauth/v2/accessToken

app:
  auth:
    tokenSecret: secretKey
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
#      - myandroidapp://oauth2/redirect
#      - myiosapp://oauth2/redirect



# Links for OAuth2 configuration

#     Google oauth2 configuration
#   https://console.developers.google.com/apis/credentials

#     FaceBook oauth2 configuration
#   https://developers.facebook.com/apps/126764166015531/settings/basic/

#     Github oauth2 configuration
#   https://github.com/settings/apps

#     LinkedIn oauth2 configuration
#   https://www.linkedin.com/developers/apps/56411203/settings
#   https://docs.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/sign-in-with-linkedin


#          twitter:
#            client:
#              clientId: oXJIDGVdB0PDnMICDwKckyzKm
#              clientSecret: Z4BpN51kNsb2wbEfzDXm40v38W3I2P1u4H6fvfM6HQraVfry5j
#              accessTokenUri: https://api.twitter.com/oauth/access_token
#              userAuthorizationUri: https://api.twitter.com/oauth/authorize
#              clientAuthenticationScheme: form
#            resource:
#              userInfoUri: https://api.twitter.com/1.1/users/show.json